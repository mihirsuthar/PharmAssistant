@model PharmAssistant.Models.ViewModels.ManufacturerViewModel

@{
	ViewBag.Title = "Manufacturers";
	Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

@Scripts.Render("~/bundles/jquery")

@*<script src="~/Scripts/jquery-1.10.2.js"></script>
	<script src="~/Scripts/jquery.unobtrusive-ajax.js"></script>
	<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>*@

<script type="text/javascript">

	$(document).ready(function () {
		//validate Contact Number
		$('#contactno').on('keydown', function (e) {
			if (e.which == '8' || e.which == '46') {
				if ($('#contactno').val().length > 12) {
					$('#contactnoErrorMsg').html('Contact number must have maximum 12 digits.');
				}
				else {
					$('#contactnoErrorMsg').html('');
				}
			}
		});

		$('#contactno').on('keypress', function (e) {

			if (e.metaKey || e.which <= 0 || /[0-9]/.test(String.fromCharCode(e.which)) || e.which == '8' || e.which == '46') {
				if ($('#contactno').val().length > 11) {
					$('#contactnoErrorMsg').html('Contact number must have maximum 12 digits.');
					return false;
				}
				else {
					$('#contactnoErrorMsg').html('');
					return true;
				}

				$('#contactnoErrorMsg').html('');
				return true;
			}
			else {
				$('#contactnoErrorMsg').html('Only numbers are allowed for contact number.');
				return false;
			}
		})
	});

	function validateForm() {
		//validate Email Id
		var email = $('#emailid').val().trim();
		var pattern = /^\b[A-Z0-9._%-]+@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i;

		if (!pattern.test(email)) {
			//Show Invalid email Message
			$('#emailid').val('');
			$('#emailidErrorMsg').html('Invalid Email Id');
			return false;
		}
	}

	function changePanelTitle() {
		$('#panelTitle').val('Update Manufacturer');
	}

	function onSuccess() {
		alert('Success');
		$('#addUpdateButton').val('Add Manufacturer');
		$('#panelTitle').html('Add Manufacturer');
		resetFields();
	}

	function onFailure() {
		alert('Failure');
	}

	function resetErrorMessages() {
		$('#nameErrorMsg').html("");
		$('#addressErrorMsg').html("");
		$('#contactnoErrorMsg').html("");
		$('#emailidErrorMsg').html("");
	}

	function resetFields() {
		resetErrorMessages();
		$('#addUpdateButton').val('Add Manufacturer');
		$('#panelTitle').html('Add Manufacturer');
		$('#name').val("");
		$('#address').val("");
		$('#contactno').val("");
		$('#emailid').val("");
		$('#description').val("");
	}
</script>

<div class="row">
	<div class="col-md-4">
		<div class="panel">
			<div class="panel-heading">
				@{
					string action = "";
				}

				@if (Model.Manufacturer.ManufacturerName != null)
				{
					action = "UpdateManufacturer";
					<h3 class="panel-title" id="panelTitle">Update Manufacturer</h3>
				}
				else
				{
					action = "AddManufacturer";
					<h3 class="panel-title" id="panelTitle">Add Manufacturer</h3>
				}
			</div>
			<div class="panel-body">
				
				@using (Ajax.BeginForm(action, "Manufacturers", new AjaxOptions
				{
					HttpMethod = "POST",
					UpdateTargetId = "ManufacturersList",
					InsertionMode = InsertionMode.Replace,
					OnSuccess = "onSuccess",
					OnFailure = "onFailure"
				}))
				{
					@Html.AntiForgeryToken()

					@Html.HiddenFor(model => model.Manufacturer.ManufacturerId)

					@Html.TextBoxFor(model => model.Manufacturer.ManufacturerName, new { id = "name", @class = "form-control", placeholder = "Manufacturer Name" })
					@Html.ValidationMessageFor(model => model.Manufacturer.ManufacturerName, "", new { @class = "text-danger", id = "nameErrorMsg" })<br />

					@Html.TextAreaFor(model => model.Manufacturer.Address, new { id = "address", @class = "form-control", placeholder = "Address", rows = "4" })
					@Html.ValidationMessageFor(model => model.Manufacturer.Address, "", new { @class = "text-danger", id = "addressErrorMsg" })<br />

					@Html.TextBoxFor(model => model.Manufacturer.ContactNo, "{0:#.#}", new { id = "contactno", @class = "form-control", placeholder = "Contact Number" })
					@Html.ValidationMessageFor(model => model.Manufacturer.ContactNo, "", new { @class = "text-danger", id = "contactnoErrorMsg" })<br />

					@Html.TextBoxFor(model => model.Manufacturer.EmailId, new { id = "emailid", @class = "form-control", placeholder = "Email Id" })
					@Html.ValidationMessageFor(model => model.Manufacturer.EmailId, "", new { @class = "text-danger", id = "emailidErrorMsg" })<br />

					
					<br />

					<div class="row">
						<div class="col-md-8">
							@if (Model.Manufacturer.ManufacturerName != null)
							{
								<input type="submit" id="addUpdateButton" value="Update Manufacturer" class="btn btn-primary" onclick="return validateForm();" />
							}
							else
							{
								<input type="submit" id="addUpdateButton" value="Add Manufacturer" class="btn btn-primary" onclick="return validateForm();" />
							}

						</div>
						<div class="col-md-4">
							@Html.ActionLink("Cancel", "Index", "Manufacturers", new { @class = "btn btn-danger" })
							@*<button type="button" class="btn btn-danger" onclick="resetFields();">Cancel</button>*@
						</div>
					</div>
				}
			</div>
		</div>
	</div>

	<div class="col-md-8">
		<div class="panel">
			<div class="panel-heading">
				<h3>Manufacturers</h3>
			</div>
			<div class="panel-body" id="ManufacturersList">
				@{ Html.RenderPartial("_ManufacturersList", Model.ManufacturersList); }
			</div>
		</div>
	</div>
</div>